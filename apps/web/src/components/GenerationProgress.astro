---
// Progress indicator component for streaming generation
export interface Props {
  id?: string;
  className?: string;
}

const { id = 'generation-progress', className = '' } = Astro.props;
---

<div id={id} class={`generation-progress ${className}`}>
  <div class="progress-container">
    <div class="progress-steps">
      <div class="step active" data-step="1">
        <div class="step-icon">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 110-4m0 4v2m0-6V4" />
          </svg>
        </div>
        <div class="step-label">Processing</div>
      </div>
      
      <div class="step" data-step="2">
        <div class="step-icon">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
          </svg>
        </div>
        <div class="step-label">Enhancing</div>
      </div>
      
      <div class="step" data-step="3">
        <div class="step-icon">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
        </div>
        <div class="step-label">Rendering</div>
      </div>
      
      <div class="step" data-step="4">
        <div class="step-icon">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        </div>
        <div class="step-label">Complete</div>
      </div>
    </div>
    
    <div class="progress-bar">
      <div class="progress-fill" style="width: 25%;"></div>
    </div>
    
    <div class="progress-message">
      <p class="text-sm text-foreground/70">Initializing AI model...</p>
    </div>
  </div>
</div>

<style>
  .generation-progress {
    padding: 1.5rem;
  }
  
  .progress-steps {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1.5rem;
  }
  
  .step {
    display: flex;
    flex-direction: column;
    align-items: center;
    opacity: 0.5;
    transition: opacity 0.3s ease;
  }
  
  .step.active {
    opacity: 1;
  }
  
  .step.complete {
    opacity: 1;
  }
  
  .step-icon {
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: rgb(var(--color-background-light) / 0.2);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
  }
  
  .step.active .step-icon {
    background: rgb(var(--color-primary) / 0.2);
    color: rgb(var(--color-primary));
  }
  
  .step.complete .step-icon {
    background: rgb(var(--color-primary));
    color: rgb(var(--color-background));
  }
  
  .step-label {
    font-size: 0.875rem;
    color: rgb(var(--color-foreground) / 0.7);
  }
  
  .progress-bar {
    height: 0.5rem;
    background: rgb(var(--color-background-light) / 0.2);
    border-radius: 0.25rem;
    overflow: hidden;
    margin-bottom: 1rem;
  }
  
  .progress-fill {
    height: 100%;
    background: linear-gradient(
      to right, 
      rgb(var(--color-primary)), 
      rgb(var(--color-primary-light))
    );
    transition: width 0.3s ease;
  }
  
  .progress-message {
    text-align: center;
  }
</style>

<script>
  class GenerationProgress {
    constructor(element) {
      this.element = element;
      this.steps = element.querySelectorAll('.step');
      this.progressFill = element.querySelector('.progress-fill');
      this.message = element.querySelector('.progress-message p');
      this.currentStep = 1;
    }
    
    updateStep(stepNumber, message) {
      this.currentStep = stepNumber;
      
      // Update steps
      this.steps.forEach((step, index) => {
        const stepNum = index + 1;
        if (stepNum < stepNumber) {
          step.classList.add('complete');
          step.classList.remove('active');
        } else if (stepNum === stepNumber) {
          step.classList.add('active');
          step.classList.remove('complete');
        } else {
          step.classList.remove('active', 'complete');
        }
      });
      
      // Update progress bar
      const progress = (stepNumber / this.steps.length) * 100;
      this.progressFill.style.width = `${progress}%`;
      
      // Update message
      if (message) {
        this.message.textContent = message;
      }
    }
    
    reset() {
      this.updateStep(1, 'Initializing AI model...');
    }
    
    complete() {
      this.updateStep(4, 'Generation complete!');
    }
  }
  
  // Initialize progress components when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const progressElements = document.querySelectorAll('.generation-progress');
    progressElements.forEach(element => {
      const progress = new GenerationProgress(element);
      // Store instance on element for access from other scripts
      element._progress = progress;
    });
  });
  
  // Global function to update progress (can be called from HTMX events)
  window.updateGenerationProgress = function(stepNumber, message) {
    const progressElement = document.querySelector('#generation-progress');
    if (progressElement && progressElement._progress) {
      progressElement._progress.updateStep(stepNumber, message);
    }
  };
</script>